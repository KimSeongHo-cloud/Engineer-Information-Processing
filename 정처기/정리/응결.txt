결합도, 응집도 외우기

연산자 우선순위 외우기

5과목 좆기술

------------------------------------------

내용 결합도 (Content)- 어떤 모듈에서 선언된 데이터를 다른 모듈에서 직접 참조하거나 수정할 때  

공유 결합도 (Common) - 공통선언된 데이터를 다른 모듈에서 사용 (전역변수) 

외부 결합도 (External) - 어떤 모듈에서 선언한 데이터를 다른 외보의 모듈이 참조할 떄 

제어 결합도 (Control) - 어떤 모듈에서 다른 모듈을 논리적으로 제어할 때 제어신호를 전달

스탬프 결합도 (Stamp)- 모듈 간의 인터페이스가 자료구조로 전달 

자료 결합도 (Data) - 모듈 간의 인터페이스가 관련된 자료로만 구성 (파라미터)



----------------------------------------------------------------------


자료 결합도 : 모듈 간의 인터페이스가 관련된 자료로만

스템프 결합도 : 인터페이스가 자료구조로 전달 된 것 ?

제어 결합도 : 논리적 으로 회선 제어

외부 결합도 : 선언된 모듈에 외부모듈이 참조 하는 것

공통 결합도 : 어떤 모듈이 다른 모듈과 공통으로 사용 하는 것, 공통데이터를 다른 모듈에서 사용

내부 결합도 : 어떤 모듈이 다른 모듈과 참조및 수정 하는것
		어떤 모듈이 다른 모듈의 데이터를 직접 참조하거나 수정


-----------------------------------------------------------------------

응집도

우연적(coincidece) - 모든 내부의 각 구성 요소들이 서로 관련 없는 요소로만

논리적(Logical) - 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소

시간적(Temporal) - 특정 시간에 처리되는 몇 개의 기능들을 하나의 모듈로 구성

절차적(Procedure) - 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행

통신적(교환)(Communication) - 동일한 입력과 출력을 사용하여 서로 다른 기능을 수행하는 경우

순차적(Sequential) - 모듈 내 하나의 활동으로부터 나온 출력 데이터를 그 다음 활동의 입력데이터로 사용 

기능적(Functional) - 모든 기능 요소들이 단일 문제와 연관


------------------------------------------------------------------
우연적(Coin) - 전혀 상관없는 기능들 

논리적 (Loic) - 연관된 기능들 

시간적(temporal) - 같은 시간대에 실행

절차적(Procedure) - 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성요소들이 기능을 순차적으로 실행

통신적(Communu() - 공통된 입출력 

순차적(Sequen) - 모듈의 출력값을 다음 모듈에 입력값으로 

기능적(Func) - 단일 문제


결합도 중 틀린것은? 스탬프

1. 데이터 결합도는 두 모듈이 매개변수로 자료를 전달할 때 자료구조 형태로 전달되어 이용

2. 내용 결합도는 하나의 모둘이 직접적으로 다른 모듈의 내용을 참조할 떄

3. 공통 결합도는 두 모듈이 동일한 전역 데이터를 접근하여 사용

4. 결합도는 두 모듈간의 상호작용, 또는 의존의 정도이다.


응집도 중 틀린것은? 순차

1. 모듈의 응집도란 모듈 안의 요소들이 서로 관련되어 있는 정도를 말한다

2. 기능적 응집도는 한 모듈 내부의 한 기능 요소에 의한 출력 자료가 다음 기능 요소의 입력 자료로서 제공되는 응집도

3. 교환적 응집도는 동일한 입력과 출력을 사용하는 소작업들이 모인 모듈

4. 논리적 응집도는 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들 

---------------------------------------------------------------------------------


단항연산자, 대입 연산자는 왼쪽으로 결합한다.

나머지는 전부 오른쪽으로 결합한다.

단항연산자  ! , ~ , ++ , --

(이항)산술연산자 * / + -

(이항)시프트 연산자 <<, >>

(이항)관계 연산자 < , > , <= , >=, ==, =!

(이항)비트 연산자 &, |, ^

(이항)논리 연산자 &&, ||

조건 연산자 ? :

대입 연산자 =, +=, -=, *=, %=

! ~ ++ == sizeof 단항

* / % - 이항 산술

<< >> 이항 Shift

< <= >= > == != 관계

& | ^ 비트

&& || 논리

? : 조건


= -= += 등등 대입

,

우선순위가 옳은 것은? ( 오른쪽 마지막 연산자가 가장 높은 우선순위 가정)

1. +=, &, ==, <<, +, *, ++

2. +=, <<, &, ==, +, *, ++, 

3. +=, ==, &, <<, +, *, ++

4. +=, &, ==, +, *, <<, ++








+=, <<, &, ==, +, *, ++, 

+=, & == << * + ++


a=3, b=4, c=5, d=6  일떄


d % b + ++a * c-- || c - --a >=10






a * b + c >= d && d / a - b != 0 





































































