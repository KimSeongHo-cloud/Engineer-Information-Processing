1. 스크럼 개발과정

2. 백로그를 누가 사용하는가, 역할 

3. 핵심가치 5개 용기, 단순성, 의사소통, 피드백, 존중

4. 현행 시스템 파악 
	 1단계 시스템 	2단계  SW관련	3단계 HW관련

5. 도출 분석 명세 확인 

6. 요구사항 확인, 검증 (validation, verification)

7. 요구사항 분석기법 - 정형 분석, 요구사항 협상 과정

8. 요구사항 확인기법 - 요구사항 확인기법, 인수테스트

9. UML 관계는 필수

10. 정적다이어그램, 동적다이어그램 (54)

11. UI 기본원칙 직관성 유연성 학습성 유효성

12. 웹 3요소 표준, 호환성, 접근성 

13.설계 도구 와이어프레임, 스토리보드, 프로토타입, 목업

14. 야스오9126
기능 신뢰 사용 유지보수 효율 이식 (영어추천)

15. UI 설계서 작성과정

16. 감성공학 

17. SW아키텍처 기본원리 모듈화, 추상화, 단계적 분해, 정보은닉
 
18.과정 추상화, 데이터 추상화, 제어 추상화 특)

19. 아키텍처 패턴 레어어, 클라이언트, 파이프필터, mvc, 마스터슬레이브

20. 객체지향 (추상화, 정보은닉, 상속, 캡슐화, 다형성, 객체특성)

21. 모듈 결은 낮게 응은 높게

22. 결합도 내공외제스자

23. 응집도 우논시절통순기

24. 팬인팬아웃 눈깔있으면 맞춤

25. 공통모듈 특) 정확 명확 완전 일관 추적

26. 재사용 분류   함수 객체 컴포넌트 app

27. 디자인패턴 생성 구조 행위 

28.  요구사항 검증 ) 동료검토, 워크스루, 인스펙션

29. 요구사항 검증의 주요 항목
완전 일관 명확 기능 검증가능 추적가능 변경용이

30. 시스템 연계기술
db link, api, socket

31. 인터페이스 통신유형
단방향, 동기, 비동기

32.인터페이스 처리 유형
실시간(급할 때), 지연처리(비쌀 때), 배치(많을 떄)

33. 미들웨어
DB, RPC, MOM, TP-Mo, ORB, WAS

==================================================

34. 자료구조 선형(스택, 큐, 데크, 선형 리스트) , 비선형(트리, 그래프)

35. 데이터베이스 (운용, 저장, 공용, 통합)
	* 정의, 조작, 제어

36. 절차형  SQL (프로시저, 트리거, 사용자 정의 함수)

37. IPC (세파모, 소켓, 파이스 파이프네임, 메세지 큐싱, 쉐어드 메모리)

38. 단위모듈 테스트 (화이트테스트, 블랙박스 테스트)
	* 화이트 : 기초경로, 제어, 흐름, 루프, 조건
	* 블랙 : 경계값 분석, 동치분할, 원인-효과 그래프, 비교검사, 오류 예측검사

39. 개발 지원도구 (IDE)
	* 빌드 : ANT, MAVEN(ANT와 동일+의존성), Gradle(안드로이드)

40. 패키징 (사용자 중심, 모듈화, 순서 외우고 싶으면 외우기)

41. 릴리즈 노트 (고려사항, 순서 천재만 외우기)

42. DRM (아날로그 -> 디지털변환)
	- 클리어링하우스, 패키저, 컨트롤러, 컨테이너

43. 설치 매뉴얼 (사용자 기중, 전 과정 빠짐없이, 예외상황 별도)

44. 사용자 매뉴얼 (컴포넌트 단위, 명세서+설계서)

45. 버전등록 (형상통제(베이스라인),  commit 저장소에 올림)

46. 버전관리도구 (클라이언트/서버, 분산저장서)
	* 클라이언트/서버 : CVS, SVN(리비전 1증가)
	* 분산 : GIT(commit(지역저장소 저장), push(원격저장소 저장))

47. 빌드 자동화 도구(jeknis 자바, gradle 안드로이드 groovy)

48. 어플리케이션 테스트 (검증 확인, 살충제 패러다임, 파레토 법칙)

49. 테스트 분류
	동적 : 워킹스루, 인스펙션
	정적 : 화이트박스, 블랙박스

50. 테스트 기반에 따른 테스트( 명세, 구조, 경험)

51. 시각에 따른 테스트
	* 검증 : 기능 
	* 확인 : 요구사항(명세서)

52. 목적에 따른 테스트 (강도, 회복, 회귀)

53. 어플리케이션 테스트 (단위,통합,시스템,인수(사용자 요구사항위주))

54. 통합테스트 (하향식, 상향식)
	* 하향식 : 스텁
	  - 깊이, 넓이
	* 상향식 : 클러스터로 결합하고, 드라이버 작성

55. 결함관리 프로세서

56. 테스트케이스 (테스트 목록 나열)

57. 테스트 시나리오 (케이스에서 나열된 목록 상세히 명세)

58. 테스트 오라클(참, 샘플링, 추정, 일관성)

59. 테스트 하네스(테스트 드라이버, 테스트 스텁, 테스트 슈트, 테스트 스크립트, 목 오브젝트, 테스트 케이스)

60. 결함관리 (분포, 추세, 에이징)
	* 분포 : 횟수
	* 추세 : 시간에 따른 추이 분석
	* 에이징 : 멈춘 시간

61. 결함 심각도 (심각도가 높다고 우선순위가 높지 않다.)

62. 애플리케이션 성능 (처리량, 응답시간, 자원 사용률, 경과시간)
	* 일정시간 부하 줌 -> 부하테스트
	* 과부화 상태에서 더 심하게 함 -> 스트레스테스트

63. 모듈 연계
	[EAI] : 어플리케이션 중심
	* point to point (망형)
	* Hub & spoke (성형)
	* msg bus(버스형)
	* hybrid
	[ESB] : 서비스 중심
	*  msg bus비슷


64. JSON, XML, AJAX
	* JSON : 사람이 읽을수 있게하는 포맷
	* XML : 마크업 언어
	* AJAX : 사용자와 웹의 상호작용, 통신기술

65. 인터페이스 보안 (네트워크, 어플리케이션, 데이터베이스)

66. 인터페이스 구현 감시도구 : APM(모니터링)

67. 오류보고 (SMS, 알람, 이메일)

===============================================
68. 데이터베이스 : 무결성, 제약조건, 논리적구조

69. 설계순서 (개념, 논리, 물리)
	* 개념 : 트랜젝션 모델링
	* 논리 : 트랜젝션 인터페이스 설계, DBMS에 맞는 스키마 설게
	* 물리 : 접근경로, 저장구조
	* 구현 : 트랜젝션 작성

