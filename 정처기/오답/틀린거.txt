페이지 크기가 작은 경우
- 단편화 감소
- 주기억장치로 이동시간이 줄어든다
- 효율적인 워킹셋
- 기억장치 효율이 좋아진다
- 페이지 멥 테이블의 크기 증가
- 매핑속도가 줄어든다
- 디스크 접근횟수가 늘어난다
- 입출력 효율이 안좋다. 

스크립트 언어
- asp, jsp, php, python, javascript

선연형 언어
- html,xml

절자형 언어
- c, fortran

선점 스케쥴링 알고리즘
- RR, SRT, 다단계 큐싱

비선점 스케쥴링 알고리즘
- HRN, FIFO, FCFS, SJF, 우선순위, 기한부

ISO/IEC 12207
조직
지원
기본

CMMI 단계
초기 - 관리 - 정의 -정략적 관리 - 최적화

SPICE
불완전 - 수행 - 관리 - 확립 - 예측 - 최적화

JSON
- 비동기 브라우저/서버통신(AJAX)을 위해 "속성 - 값 쌍", "키 - 값 쌍"으로 이루어진 데이터 오브젝트를 전달하기 위해 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷

AJAX
- 자바스크립트를 사용한 비동기 통신기술, 클라이언트와 서버 간에 XML 데이터를 주고받는 기술

XML
- 다른 특수한 목적을 가지는 마크업 언어를 만드는데 사용하도록 권장하는 다목적 마크업언어

교착상태 발생조건
- 환형대기(Circuit Wait)
- 점유와 대기 (Hold & Wait)
- 상호배제(Mutual Exclusion)
- 비선점(Non-Preemption)

HDLC 프레임 
I프레임 (정보) - 피기백킹, 확인응답
S프레임 (감독) - 흐름, 오류제어
U프레임 (비번호) - 링크설정, 오류회복

라우팅 테이블의 구성사항
-메트릭, 홉, 수신지 네트워크, 주소

802.x
2 - LLC
3 - CSMA/CD
4 - 토큰버스
5 - 토큰링
6 - MAN
11 - 무선LAN

3P프로젝트
-Person
-Process
-Problem

동시성 제어
- 로킹기법 : 라킹이 걸려야만 로킹단위 엑세스
- 타임스탬프 : 트랜잭션 간의 순서 미리 정의
- 검증 : 충동률이 낮다는것을 이용

로킹단위
- 로킹단위가 크면 로크수가 적어진다. 병행성이 낮아진다. 관리가 쉽다. 오버헤드가 적어진다.

- 로킹단위가 작으면 로크수가 많아진다. 병행성이 높아진다. 관리가 복잡하다. 오버헤드가 커진다.

부트스트랩
- OS의 커널을 찾아 메모리에 적재하는 과정

CASE
- 상위 케이스는 문제를 기술하고 계획하며 요구분석과 설계 단계를 지원
- 하위 케이스는 코드의 작성과 테스트, 문서화하는 과정을 지원, 코딩,테스트, 문서화

IPv4 -> IPv6
- 듀얼스택, 터널링, 주소변환

RTP
- 멀티캐스트, 유니캐스트, 실시간 특성을 가지는 데이터 종단간 UDP프로토콜

럼바우
- 객체 : 객체도, 정보모델링, 속성, 연산, 관계
- 동적 : 상태도, 시간의 흐름에 따른 동적행위
- 기능 : 자료흐름도(DFD)

모듈의 크기
- 크면 하나당 개발 비용이 비싸진다.
- 작으면 모듈의 수가 많아져 통합비용이 비싸진다.

패턴
- 생성 : Factory method, Single tone
- 구조 : Facade, Proxy
- 행위 : Template, Commande, Observer

1. 일괄처리 시스템 - 데이터를 모아서 한꺼번에 처리한다. 효율이 좋음
2. 다중 프로그래밍 시스템 - 하나의 cpu를 이용, 여러 개의 프로그램을 동시에 실행한다.
3. 시분할 시스템  - 여러 프로그램을 약간의 시간차를 두고 번갈아 실행하여, 동시에 실행되는 느낌을 줌.
4. 다중 처리 시스템 - 여러 개의 cpu를 이용, 여러 개의 프로그램을 동시에 실행한다.
5. 실시간 처리 시스템 - 데이터 처리의 요구가 발생한 즉시 처리한다.
6. 다중 모드 처리 시스템 - 일괄, 시분할 처리 시스템 등의 여러 시스템들을 중복 사용하는 시스템
7. 분산 처리 시스템 - 여러 개의 컴퓨터를 연결하여 하나의 작업을 처리. (게임으로 치면 보스 레이드)


객체지향 분석
-럼바우의 방법
① 객체(Object) 모델링 : 객체들 간의 관계를 규정하여 표현
② 동적(Dynamic) 모델링 : 상태도를 이용
③ 기능(Functional) 모델링 : 자료흐름도를 이용

재공학 restructuring : 하나의 표현을 다른 표현 형태로 바꾸는 것
역공학 reverse engineering : 기존 소프트웨어를 분석하여 재발견하거나 다시 만듦

분석 analysis : 기존 소프트웨어의 명세서를 확인하여 소프트웨어의 동작을 이해하고, 재공학 대상을 선정

이식 migration : 기존 소프트웨어를 다른 운영체제나 하드웨어 환경에서 사용할 수 있도록 변환하는 작업

컴포넌트 ( Component )
- 객체들의 모임, 대규모 재사용 단위
-재사용 단위 중 객체들의 모임이나 대규모 재사용 단위를 컴포넌트(Component)

접근 제어(Access Control) : 사용자의 신원에 따라 서로 다른 접근 권한을 허용